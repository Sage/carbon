// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Select does not apply any events if disabled or readonly 1`] = `
<Fragment>
  <InputDecoratorBridge
    className="carbon-select"
    data-component="carbon-select"
    formattedValue=""
    inputIcon="dropdown"
    inputRef={[Function]}
    leftChildren={false}
    onBlur={[Function]}
    onChange={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
  />
</Fragment>
`;

exports[`Select does not apply any events if disabled or readonly 2`] = `
<Fragment>
  <InputDecoratorBridge
    className="carbon-select"
    data-component="carbon-select"
    formattedValue=""
    inputIcon="dropdown"
    inputRef={[Function]}
    leftChildren={false}
    onBlur={[Function]}
    onChange={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
  />
</Fragment>
`;

exports[`Select renders only the InputDecoratorBridge when closed 1`] = `
<Fragment>
  <InputDecoratorBridge
    className="carbon-select"
    data-component="carbon-select"
    formattedValue=""
    inputIcon="dropdown"
    inputRef={[Function]}
    leftChildren={false}
    onBlur={[Function]}
    onChange={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
  />
</Fragment>
`;

exports[`Select renders the SelectList with any given children when in an open state 1`] = `
Object {
  "alwaysHighlight": false,
  "children": Array [
    <div>
      1
    </div>,
    <div>
      2
    </div>,
    <div>
      3
    </div>,
  ],
  "customFilter": undefined,
  "filterValue": undefined,
  "onLazyLoad": undefined,
  "onMouseEnter": [Function],
  "onMouseLeave": [Function],
  "onSelect": [Function],
  "open": true,
  "target": .c3 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  cursor: pointer;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  margin-right: -11px;
  width: 40px;
}

.c2 {
  background: transparent;
  border: none;
  color: rgba(0,0,0,0.9);
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  font-size: 14px;
  outline: none;
  width: 30px;
}

.c2::-webkit-input-placeholder {
  color: rgba(0,0,0,0.3);
}

.c2::-moz-placeholder {
  color: rgba(0,0,0,0.3);
}

.c2:-ms-input-placeholder {
  color: rgba(0,0,0,0.3);
}

.c2::placeholder {
  color: rgba(0,0,0,0.3);
}

.c2:invalid,
.c2:required {
  box-shadow: none;
}

.c4 .c1 {
  height: calc(40px - 4px);
}

.c0 {
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  background: #fff;
  border: 1px solid #668491;
  box-sizing: border-box;
  cursor: text;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-flex: 0 0 70%;
  -ms-flex: 0 0 70%;
  flex: 0 0 70%;
  margin: 0;
  min-height: 40px;
  padding-left: 11px;
  padding-right: 11px;
}

.c0 .c1 {
  height: calc(40px - 4px);
}

.c0.c0 {
  outline: 3px solid #FFB500;
  z-index: 2;
}

.c0 input::-ms-clear {
  display: none;
}

.c0 input::-webkit-contacts-auto-fill-button {
  display: none!important;
}

<div
    autocomplete="off"
    class="c0"
    data-element="input"
    name="guid-12345"
    role="presentation"
    type="text"
  >
    <input
      autocomplete="off"
      class="c1 c2"
      data-element="input"
      id="guid-12345"
      name="guid-12345"
      value=""
    />
    <span
      data-portal-entrance="guid-12345"
    />
    <span
      autocomplete="off"
      class="c3"
      data-element="input"
      name="guid-12345"
      type="dropdown"
    >
      <span
        class="carbon-icon icon-dropdown"
        data-component="icon"
        data-element="dropdown"
      />
    </span>
  </div>,
}
`;

exports[`Select when multi-value renders the the textbox with the following:
        * formattedValue is empty
        * value contains the array of values
        * leftChildren contains the pills
        * inputIcon is disabled
        * placeholder is disabled 1`] = `
Array [
  <div
    className="carbon-select__pill"
  >
    <Pill
      as="default"
      className=""
      fill={false}
      onClick={null}
      onDelete={[Function]}
      title="Orange"
    >
      Orange
    </Pill>
  </div>,
  <div
    className="carbon-select__pill"
  >
    <Pill
      as="default"
      className=""
      fill={false}
      onClick={null}
      onDelete={[Function]}
      title="Blue"
    >
      Blue
    </Pill>
  </div>,
  <div
    className="carbon-select__pill"
  >
    <Pill
      as="default"
      className=""
      fill={false}
      onClick={null}
      onDelete={[Function]}
      title="Red"
    >
      Red
    </Pill>
  </div>,
]
`;
