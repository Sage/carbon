// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeIcon when rendered with no additional props should match the snapshot for error 1`] = `
.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: var(--colorsSemanticNegative500);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  line-height: 100%;
  min-width: 30px;
  text-align: center;
}

.c0 span:before {
  color: var(--colorsUtilityYang100);
}

<div
  className="c0"
/>
`;

exports[`TypeIcon when rendered with no additional props should match the snapshot for info 1`] = `
.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: var(--colorsSemanticNeutral500);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  line-height: 100%;
  min-width: 30px;
  text-align: center;
}

.c0 span:before {
  color: var(--colorsUtilityYang100);
}

<div
  className="c0"
/>
`;

exports[`TypeIcon when rendered with no additional props should match the snapshot for success 1`] = `
.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: var(--colorsSemanticPositive500);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  line-height: 100%;
  min-width: 30px;
  text-align: center;
}

.c0 span:before {
  color: var(--colorsUtilityYang100);
}

<div
  className="c0"
/>
`;

exports[`TypeIcon when rendered with no additional props should match the snapshot for warning 1`] = `
.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: var(--colorsSemanticCaution500);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  line-height: 100%;
  min-width: 30px;
  text-align: center;
}

.c0 span:before {
  color: var(--colorsUtilityYang100);
}

<div
  className="c0"
/>
`;

exports[`TypeIcon when transparent prop is set to true applies white background and the type icon with the proper style applied 1`] = `
.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: var(--colorsSemanticNeutral500);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  line-height: 100%;
  min-width: 30px;
  text-align: center;
  background-color: transparent;
}

.c0 span:before {
  color: var(--colorsUtilityYang100);
}

.c0 span:before {
  color: var(--colorsSemanticNeutral500);
}

<div
  className="c0"
/>
`;

exports[`TypeIcon when transparent prop is set to true applies white background and the type icon with the proper style applied 2`] = `
.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: var(--colorsSemanticNegative500);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  line-height: 100%;
  min-width: 30px;
  text-align: center;
  background-color: transparent;
}

.c0 span:before {
  color: var(--colorsUtilityYang100);
}

.c0 span:before {
  color: var(--colorsSemanticNegative500);
}

<div
  className="c0"
/>
`;

exports[`TypeIcon when transparent prop is set to true applies white background and the type icon with the proper style applied 3`] = `
.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: var(--colorsSemanticPositive500);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  line-height: 100%;
  min-width: 30px;
  text-align: center;
  background-color: transparent;
}

.c0 span:before {
  color: var(--colorsUtilityYang100);
}

.c0 span:before {
  color: var(--colorsSemanticPositive500);
}

<div
  className="c0"
/>
`;

exports[`TypeIcon when transparent prop is set to true applies white background and the type icon with the proper style applied 4`] = `
.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: var(--colorsSemanticCaution500);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  line-height: 100%;
  min-width: 30px;
  text-align: center;
  background-color: transparent;
}

.c0 span:before {
  color: var(--colorsUtilityYang100);
}

.c0 span:before {
  color: var(--colorsSemanticCaution500);
}

<div
  className="c0"
/>
`;
