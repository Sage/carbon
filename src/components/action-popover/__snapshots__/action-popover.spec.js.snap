// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ActionPopover styles renders correctly for the "classic" theme 1`] = `
.c0 {
  visibility: hidden;
  margin: 0;
  padding: 5px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
  box-shadow: 0 10px 10px 0 rgba(0,20,29,0.1), 0 5px 5px 0 rgba(0,20,29,0.2);
  padding: 5px 0;
}

<div
  className="c0"
/>
`;

exports[`ActionPopover styles renders correctly for the "classic" theme 2`] = `
.c0 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 15px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  line-height: 35px;
  padding: 0 15px 0 10px;
}

.c0:focus,
.c0:hover {
  background-color: #F2F4F5;
}

.c0:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c0.c0 .c1 {
  cursor: pointer;
}

.c0:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 1px #255BC7;
}

<div
  className="c0"
/>
`;

exports[`ActionPopover styles renders correctly for the "classic" theme 3`] = `
.c0 {
  position: relative;
  width: 24px;
  margin: auto;
}

.c0.c0 .c1 {
  cursor: pointer;
}

.c0:hover,
.c0:focus {
  background-color: #FFFFFF;
}

.c0:focus {
  outline: 2px solid #FFB500;
}

.c0:focus {
  outline: 1px solid #255BC7;
}

.c0:hover > span,
.c0:focus > span {
  color: #255BC7;
}

<div
  className="c0"
/>
`;

exports[`ActionPopover submenu left aligned closes the submenu on mouseleave event 1`] = `
.c0 {
  visibility: hidden;
  margin: 0;
  padding: 8px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
}

.c1 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 24px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
}

.c1:focus,
.c1:hover {
  background-color: #F2F4F5;
}

.c1:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c1.c1 .c2 {
  cursor: pointer;
}

<ActionPopoverMenu
  focusIndex={0}
  isOpen={false}
  items={
    Array [
      <ForwardRef
        disabled={false}
        onClick={[Function]}
      >
        Sub Menu 1
      </ForwardRef>,
      <ForwardRef
        disabled={false}
        onClick={[Function]}
      >
        Sub Menu 2
      </ForwardRef>,
    ]
  }
  menuID="ActionPopoverMenu_guid-12345"
  onClick={[Function]}
  parentID="ActionPopoverItem_guid-12345"
  setFocusIndex={[Function]}
  setItems={[Function]}
  setOpen={[Function]}
  style={
    Object {
      "left": 0,
      "position": "relative",
      "top": -8,
    }
  }
>
  <styled.div
    aria-labelledby="ActionPopoverItem_guid-12345"
    data-component="action-popover"
    id="ActionPopoverMenu_guid-12345"
    isOpen={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    role="menu"
    style={
      Object {
        "left": 0,
        "position": "relative",
        "top": -8,
      }
    }
  >
    <StyledComponent
      aria-labelledby="ActionPopoverItem_guid-12345"
      data-component="action-popover"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ifAKCX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              [Function],
              ";
  margin: 0;
  padding: ",
              [Function],
              ";
  box-shadow: ",
              [Function],
              ";
  position: absolute;
  right: 0;
  background-color: ",
              [Function],
              ";
  z-index: 1;

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ifAKCX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={
        Object {
          "current": .c0 {
  visibility: hidden;
  margin: 0;
  padding: 8px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
}

.c1 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 24px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
}

.c1:focus,
.c1:hover {
  background-color: #F2F4F5;
}

.c1:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c1.c1 .c2 {
  cursor: pointer;
}

<div
            aria-labelledby="ActionPopoverItem_guid-12345"
            class="c0"
            data-component="action-popover"
            id="ActionPopoverMenu_guid-12345"
            role="menu"
            style="position: relative; left: 0px; top: -8px;"
          >
            <div
              class="c1"
              role="menuitem"
              tabindex="0"
              type="button"
            >
              Sub Menu 1
            </div>
            <div
              class="c1"
              role="menuitem"
              tabindex="0"
              type="button"
            >
              Sub Menu 2
            </div>
          </div>,
        }
      }
      id="ActionPopoverMenu_guid-12345"
      isOpen={false}
      onClick={[Function]}
      onKeyDown={[Function]}
      role="menu"
      style={
        Object {
          "left": 0,
          "position": "relative",
          "top": -8,
        }
      }
    >
      <div
        aria-labelledby="ActionPopoverItem_guid-12345"
        className="c0"
        data-component="action-popover"
        id="ActionPopoverMenu_guid-12345"
        onClick={[Function]}
        onKeyDown={[Function]}
        role="menu"
        style={
          Object {
            "left": 0,
            "position": "relative",
            "top": -8,
          }
        }
      >
        <WithTheme(ActionPopoverItem)
          disabled={false}
          key=".$0"
          onClick={[Function]}
        >
          <ActionPopoverItem
            disabled={false}
            onClick={[Function]}
            theme="[ theme object ]"
          >
            <StyledComponent
              disabled={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "disabled": false,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  cursor: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      [Function],
                      "
  line-height: 40px;
  white-space: nowrap;
  user-select: none;
  display: flex;
  align-items: center;
  border: none;
  width: 100%;
  color: ",
                      [Function],
                      ";
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  &:focus, &:hover {
    ",
                      [Function],
                      "
  }
  &:focus {
    outline: none;
    box-shadow: inset 0px 0px 0px 2px ",
                      [Function],
                      ";
  }
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "ActionPopoverItem",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "disabled": [Function],
                    "icon": [Function],
                    "onClick": [Function],
                    "submenu": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": <div
                    class="c1"
                    role="menuitem"
                    tabindex="0"
                    type="button"
                  >
                    Sub Menu 1
                  </div>,
                }
              }
              onClick={[Function]}
              theme="[ theme object ]"
            >
              <ForwardRef
                className="c1"
                disabled={false}
                onClick={[Function]}
                theme="[ theme object ]"
              >
                <div
                  className="c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="menuitem"
                  tabIndex="0"
                  type="button"
                >
                  Sub Menu 1
                </div>
              </ForwardRef>
            </StyledComponent>
          </ActionPopoverItem>
        </WithTheme(ActionPopoverItem)>
        <WithTheme(ActionPopoverItem)
          disabled={false}
          key=".$1"
          onClick={[Function]}
        >
          <ActionPopoverItem
            disabled={false}
            onClick={[Function]}
            theme="[ theme object ]"
          >
            <StyledComponent
              disabled={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "disabled": false,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  cursor: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      [Function],
                      "
  line-height: 40px;
  white-space: nowrap;
  user-select: none;
  display: flex;
  align-items: center;
  border: none;
  width: 100%;
  color: ",
                      [Function],
                      ";
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  &:focus, &:hover {
    ",
                      [Function],
                      "
  }
  &:focus {
    outline: none;
    box-shadow: inset 0px 0px 0px 2px ",
                      [Function],
                      ";
  }
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "ActionPopoverItem",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "disabled": [Function],
                    "icon": [Function],
                    "onClick": [Function],
                    "submenu": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": <div
                    class="c1"
                    role="menuitem"
                    tabindex="0"
                    type="button"
                  >
                    Sub Menu 2
                  </div>,
                }
              }
              onClick={[Function]}
              theme="[ theme object ]"
            >
              <ForwardRef
                className="c1"
                disabled={false}
                onClick={[Function]}
                theme="[ theme object ]"
              >
                <div
                  className="c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="menuitem"
                  tabIndex="0"
                  type="button"
                >
                  Sub Menu 2
                </div>
              </ForwardRef>
            </StyledComponent>
          </ActionPopoverItem>
        </WithTheme(ActionPopoverItem)>
      </div>
    </StyledComponent>
  </styled.div>
</ActionPopoverMenu>
`;

exports[`ActionPopover submenu left aligned closes the submenu when right key is pressed 1`] = `
.c0 {
  visibility: hidden;
  margin: 0;
  padding: 8px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
}

.c1 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 24px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
}

.c1:focus,
.c1:hover {
  background-color: #F2F4F5;
}

.c1:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c1.c1 .c2 {
  cursor: pointer;
}

<ActionPopoverMenu
  focusIndex={0}
  isOpen={false}
  items={
    Array [
      <ForwardRef
        disabled={false}
        onClick={[Function]}
      >
        Sub Menu 1
      </ForwardRef>,
      <ForwardRef
        disabled={false}
        onClick={[Function]}
      >
        Sub Menu 2
      </ForwardRef>,
    ]
  }
  menuID="ActionPopoverMenu_guid-12345"
  onClick={[Function]}
  parentID="ActionPopoverItem_guid-12345"
  setFocusIndex={[Function]}
  setItems={[Function]}
  setOpen={[Function]}
  style={
    Object {
      "left": 0,
      "position": "relative",
      "top": -8,
    }
  }
>
  <styled.div
    aria-labelledby="ActionPopoverItem_guid-12345"
    data-component="action-popover"
    id="ActionPopoverMenu_guid-12345"
    isOpen={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    role="menu"
    style={
      Object {
        "left": 0,
        "position": "relative",
        "top": -8,
      }
    }
  >
    <StyledComponent
      aria-labelledby="ActionPopoverItem_guid-12345"
      data-component="action-popover"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ifAKCX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              [Function],
              ";
  margin: 0;
  padding: ",
              [Function],
              ";
  box-shadow: ",
              [Function],
              ";
  position: absolute;
  right: 0;
  background-color: ",
              [Function],
              ";
  z-index: 1;

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ifAKCX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={
        Object {
          "current": .c0 {
  visibility: hidden;
  margin: 0;
  padding: 8px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
}

.c1 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 24px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
}

.c1:focus,
.c1:hover {
  background-color: #F2F4F5;
}

.c1:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c1.c1 .c2 {
  cursor: pointer;
}

<div
            aria-labelledby="ActionPopoverItem_guid-12345"
            class="c0"
            data-component="action-popover"
            id="ActionPopoverMenu_guid-12345"
            role="menu"
            style="position: relative; left: 0px; top: -8px;"
          >
            <div
              class="c1"
              role="menuitem"
              tabindex="0"
              type="button"
            >
              Sub Menu 1
            </div>
            <div
              class="c1"
              role="menuitem"
              tabindex="0"
              type="button"
            >
              Sub Menu 2
            </div>
          </div>,
        }
      }
      id="ActionPopoverMenu_guid-12345"
      isOpen={false}
      onClick={[Function]}
      onKeyDown={[Function]}
      role="menu"
      style={
        Object {
          "left": 0,
          "position": "relative",
          "top": -8,
        }
      }
    >
      <div
        aria-labelledby="ActionPopoverItem_guid-12345"
        className="c0"
        data-component="action-popover"
        id="ActionPopoverMenu_guid-12345"
        onClick={[Function]}
        onKeyDown={[Function]}
        role="menu"
        style={
          Object {
            "left": 0,
            "position": "relative",
            "top": -8,
          }
        }
      >
        <WithTheme(ActionPopoverItem)
          disabled={false}
          key=".$0"
          onClick={[Function]}
        >
          <ActionPopoverItem
            disabled={false}
            onClick={[Function]}
            theme="[ theme object ]"
          >
            <StyledComponent
              disabled={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "disabled": false,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  cursor: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      [Function],
                      "
  line-height: 40px;
  white-space: nowrap;
  user-select: none;
  display: flex;
  align-items: center;
  border: none;
  width: 100%;
  color: ",
                      [Function],
                      ";
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  &:focus, &:hover {
    ",
                      [Function],
                      "
  }
  &:focus {
    outline: none;
    box-shadow: inset 0px 0px 0px 2px ",
                      [Function],
                      ";
  }
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "ActionPopoverItem",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "disabled": [Function],
                    "icon": [Function],
                    "onClick": [Function],
                    "submenu": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": <div
                    class="c1"
                    role="menuitem"
                    tabindex="0"
                    type="button"
                  >
                    Sub Menu 1
                  </div>,
                }
              }
              onClick={[Function]}
              theme="[ theme object ]"
            >
              <ForwardRef
                className="c1"
                disabled={false}
                onClick={[Function]}
                theme="[ theme object ]"
              >
                <div
                  className="c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="menuitem"
                  tabIndex="0"
                  type="button"
                >
                  Sub Menu 1
                </div>
              </ForwardRef>
            </StyledComponent>
          </ActionPopoverItem>
        </WithTheme(ActionPopoverItem)>
        <WithTheme(ActionPopoverItem)
          disabled={false}
          key=".$1"
          onClick={[Function]}
        >
          <ActionPopoverItem
            disabled={false}
            onClick={[Function]}
            theme="[ theme object ]"
          >
            <StyledComponent
              disabled={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "disabled": false,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  cursor: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      [Function],
                      "
  line-height: 40px;
  white-space: nowrap;
  user-select: none;
  display: flex;
  align-items: center;
  border: none;
  width: 100%;
  color: ",
                      [Function],
                      ";
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  &:focus, &:hover {
    ",
                      [Function],
                      "
  }
  &:focus {
    outline: none;
    box-shadow: inset 0px 0px 0px 2px ",
                      [Function],
                      ";
  }
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "ActionPopoverItem",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "disabled": [Function],
                    "icon": [Function],
                    "onClick": [Function],
                    "submenu": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": <div
                    class="c1"
                    role="menuitem"
                    tabindex="0"
                    type="button"
                  >
                    Sub Menu 2
                  </div>,
                }
              }
              onClick={[Function]}
              theme="[ theme object ]"
            >
              <ForwardRef
                className="c1"
                disabled={false}
                onClick={[Function]}
                theme="[ theme object ]"
              >
                <div
                  className="c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="menuitem"
                  tabIndex="0"
                  type="button"
                >
                  Sub Menu 2
                </div>
              </ForwardRef>
            </StyledComponent>
          </ActionPopoverItem>
        </WithTheme(ActionPopoverItem)>
      </div>
    </StyledComponent>
  </styled.div>
</ActionPopoverMenu>
`;

exports[`ActionPopover submenu left aligned opens the submenu on mouseenter 1`] = `
.c0 {
  visibility: hidden;
  margin: 0;
  padding: 8px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
}

.c1 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 24px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
}

.c1:focus,
.c1:hover {
  background-color: #F2F4F5;
}

.c1:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c1.c1 .c2 {
  cursor: pointer;
}

<ActionPopoverMenu
  focusIndex={0}
  isOpen={false}
  items={
    Array [
      <ForwardRef
        disabled={false}
        onClick={[Function]}
      >
        Sub Menu 1
      </ForwardRef>,
      <ForwardRef
        disabled={false}
        onClick={[Function]}
      >
        Sub Menu 2
      </ForwardRef>,
    ]
  }
  menuID="ActionPopoverMenu_guid-12345"
  onClick={[Function]}
  parentID="ActionPopoverItem_guid-12345"
  setFocusIndex={[Function]}
  setItems={[Function]}
  setOpen={[Function]}
  style={
    Object {
      "left": 0,
      "position": "relative",
      "top": -8,
    }
  }
>
  <styled.div
    aria-labelledby="ActionPopoverItem_guid-12345"
    data-component="action-popover"
    id="ActionPopoverMenu_guid-12345"
    isOpen={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    role="menu"
    style={
      Object {
        "left": 0,
        "position": "relative",
        "top": -8,
      }
    }
  >
    <StyledComponent
      aria-labelledby="ActionPopoverItem_guid-12345"
      data-component="action-popover"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ifAKCX",
            "isStatic": false,
            "lastClassName": "dnTSjX",
            "rules": Array [
              "
  ",
              [Function],
              ";
  margin: 0;
  padding: ",
              [Function],
              ";
  box-shadow: ",
              [Function],
              ";
  position: absolute;
  right: 0;
  background-color: ",
              [Function],
              ";
  z-index: 1;

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ifAKCX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={
        Object {
          "current": .c0 {
  display: block;
  margin: 0;
  padding: 8px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
}

.c1 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 24px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
}

.c1:focus,
.c1:hover {
  background-color: #F2F4F5;
}

.c1:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c1.c1 .c2 {
  cursor: pointer;
}

<div
            aria-labelledby="ActionPopoverItem_guid-12345"
            class="c0"
            data-component="action-popover"
            id="ActionPopoverMenu_guid-12345"
            role="menu"
            style="position: relative; left: 0px; top: -8px;"
          >
            <div
              class="c1"
              role="menuitem"
              tabindex="0"
              type="button"
            >
              Sub Menu 1
            </div>
            <div
              class="c1"
              role="menuitem"
              tabindex="0"
              type="button"
            >
              Sub Menu 2
            </div>
          </div>,
        }
      }
      id="ActionPopoverMenu_guid-12345"
      isOpen={false}
      onClick={[Function]}
      onKeyDown={[Function]}
      role="menu"
      style={
        Object {
          "left": 0,
          "position": "relative",
          "top": -8,
        }
      }
    >
      <div
        aria-labelledby="ActionPopoverItem_guid-12345"
        className="c0"
        data-component="action-popover"
        id="ActionPopoverMenu_guid-12345"
        onClick={[Function]}
        onKeyDown={[Function]}
        role="menu"
        style={
          Object {
            "left": 0,
            "position": "relative",
            "top": -8,
          }
        }
      >
        <WithTheme(ActionPopoverItem)
          disabled={false}
          key=".$0"
          onClick={[Function]}
        >
          <ActionPopoverItem
            disabled={false}
            onClick={[Function]}
            theme="[ theme object ]"
          >
            <StyledComponent
              disabled={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "disabled": false,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  cursor: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      [Function],
                      "
  line-height: 40px;
  white-space: nowrap;
  user-select: none;
  display: flex;
  align-items: center;
  border: none;
  width: 100%;
  color: ",
                      [Function],
                      ";
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  &:focus, &:hover {
    ",
                      [Function],
                      "
  }
  &:focus {
    outline: none;
    box-shadow: inset 0px 0px 0px 2px ",
                      [Function],
                      ";
  }
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "ActionPopoverItem",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "disabled": [Function],
                    "icon": [Function],
                    "onClick": [Function],
                    "submenu": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": null,
                }
              }
              onClick={[Function]}
              theme="[ theme object ]"
            >
              <ForwardRef
                className="c1"
                disabled={false}
                onClick={[Function]}
                theme="[ theme object ]"
              >
                <div
                  className="c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="menuitem"
                  tabIndex="0"
                  type="button"
                >
                  Sub Menu 1
                </div>
              </ForwardRef>
            </StyledComponent>
          </ActionPopoverItem>
        </WithTheme(ActionPopoverItem)>
        <WithTheme(ActionPopoverItem)
          disabled={false}
          key=".$1"
          onClick={[Function]}
        >
          <ActionPopoverItem
            disabled={false}
            onClick={[Function]}
            theme="[ theme object ]"
          >
            <StyledComponent
              disabled={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "disabled": false,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  cursor: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      [Function],
                      "
  line-height: 40px;
  white-space: nowrap;
  user-select: none;
  display: flex;
  align-items: center;
  border: none;
  width: 100%;
  color: ",
                      [Function],
                      ";
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  &:focus, &:hover {
    ",
                      [Function],
                      "
  }
  &:focus {
    outline: none;
    box-shadow: inset 0px 0px 0px 2px ",
                      [Function],
                      ";
  }
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "ActionPopoverItem",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "disabled": [Function],
                    "icon": [Function],
                    "onClick": [Function],
                    "submenu": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": null,
                }
              }
              onClick={[Function]}
              theme="[ theme object ]"
            >
              <ForwardRef
                className="c1"
                disabled={false}
                onClick={[Function]}
                theme="[ theme object ]"
              >
                <div
                  className="c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="menuitem"
                  tabIndex="0"
                  type="button"
                >
                  Sub Menu 2
                </div>
              </ForwardRef>
            </StyledComponent>
          </ActionPopoverItem>
        </WithTheme(ActionPopoverItem)>
      </div>
    </StyledComponent>
  </styled.div>
</ActionPopoverMenu>
`;

exports[`ActionPopover submenu left aligned opens the submenu when left key is pressed 1`] = `
.c0 {
  visibility: hidden;
  margin: 0;
  padding: 8px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
}

.c1 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 24px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
}

.c1:focus,
.c1:hover {
  background-color: #F2F4F5;
}

.c1:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c1.c1 .c2 {
  cursor: pointer;
}

<ActionPopoverMenu
  focusIndex={0}
  isOpen={false}
  items={
    Array [
      <ForwardRef
        disabled={false}
        onClick={[Function]}
      >
        Sub Menu 1
      </ForwardRef>,
      <ForwardRef
        disabled={false}
        onClick={[Function]}
      >
        Sub Menu 2
      </ForwardRef>,
    ]
  }
  menuID="ActionPopoverMenu_guid-12345"
  onClick={[Function]}
  parentID="ActionPopoverItem_guid-12345"
  setFocusIndex={[Function]}
  setItems={[Function]}
  setOpen={[Function]}
  style={
    Object {
      "left": 0,
      "position": "relative",
      "top": -8,
    }
  }
>
  <styled.div
    aria-labelledby="ActionPopoverItem_guid-12345"
    data-component="action-popover"
    id="ActionPopoverMenu_guid-12345"
    isOpen={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    role="menu"
    style={
      Object {
        "left": 0,
        "position": "relative",
        "top": -8,
      }
    }
  >
    <StyledComponent
      aria-labelledby="ActionPopoverItem_guid-12345"
      data-component="action-popover"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ifAKCX",
            "isStatic": false,
            "lastClassName": "dnTSjX",
            "rules": Array [
              "
  ",
              [Function],
              ";
  margin: 0;
  padding: ",
              [Function],
              ";
  box-shadow: ",
              [Function],
              ";
  position: absolute;
  right: 0;
  background-color: ",
              [Function],
              ";
  z-index: 1;

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ifAKCX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={
        Object {
          "current": .c0 {
  display: block;
  margin: 0;
  padding: 8px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
}

.c1 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 24px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
}

.c1:focus,
.c1:hover {
  background-color: #F2F4F5;
}

.c1:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c1.c1 .c2 {
  cursor: pointer;
}

<div
            aria-labelledby="ActionPopoverItem_guid-12345"
            class="c0"
            data-component="action-popover"
            id="ActionPopoverMenu_guid-12345"
            role="menu"
            style="position: relative; left: 0px; top: -8px;"
          >
            <div
              class="c1"
              role="menuitem"
              tabindex="0"
              type="button"
            >
              Sub Menu 1
            </div>
            <div
              class="c1"
              role="menuitem"
              tabindex="0"
              type="button"
            >
              Sub Menu 2
            </div>
          </div>,
        }
      }
      id="ActionPopoverMenu_guid-12345"
      isOpen={false}
      onClick={[Function]}
      onKeyDown={[Function]}
      role="menu"
      style={
        Object {
          "left": 0,
          "position": "relative",
          "top": -8,
        }
      }
    >
      <div
        aria-labelledby="ActionPopoverItem_guid-12345"
        className="c0"
        data-component="action-popover"
        id="ActionPopoverMenu_guid-12345"
        onClick={[Function]}
        onKeyDown={[Function]}
        role="menu"
        style={
          Object {
            "left": 0,
            "position": "relative",
            "top": -8,
          }
        }
      >
        <WithTheme(ActionPopoverItem)
          disabled={false}
          key=".$0"
          onClick={[Function]}
        >
          <ActionPopoverItem
            disabled={false}
            onClick={[Function]}
            theme="[ theme object ]"
          >
            <StyledComponent
              disabled={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "disabled": false,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  cursor: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      [Function],
                      "
  line-height: 40px;
  white-space: nowrap;
  user-select: none;
  display: flex;
  align-items: center;
  border: none;
  width: 100%;
  color: ",
                      [Function],
                      ";
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  &:focus, &:hover {
    ",
                      [Function],
                      "
  }
  &:focus {
    outline: none;
    box-shadow: inset 0px 0px 0px 2px ",
                      [Function],
                      ";
  }
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "ActionPopoverItem",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "disabled": [Function],
                    "icon": [Function],
                    "onClick": [Function],
                    "submenu": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": null,
                }
              }
              onClick={[Function]}
              theme="[ theme object ]"
            >
              <ForwardRef
                className="c1"
                disabled={false}
                onClick={[Function]}
                theme="[ theme object ]"
              >
                <div
                  className="c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="menuitem"
                  tabIndex="0"
                  type="button"
                >
                  Sub Menu 1
                </div>
              </ForwardRef>
            </StyledComponent>
          </ActionPopoverItem>
        </WithTheme(ActionPopoverItem)>
        <WithTheme(ActionPopoverItem)
          disabled={false}
          key=".$1"
          onClick={[Function]}
        >
          <ActionPopoverItem
            disabled={false}
            onClick={[Function]}
            theme="[ theme object ]"
          >
            <StyledComponent
              disabled={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "disabled": false,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  cursor: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      [Function],
                      "
  line-height: 40px;
  white-space: nowrap;
  user-select: none;
  display: flex;
  align-items: center;
  border: none;
  width: 100%;
  color: ",
                      [Function],
                      ";
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  &:focus, &:hover {
    ",
                      [Function],
                      "
  }
  &:focus {
    outline: none;
    box-shadow: inset 0px 0px 0px 2px ",
                      [Function],
                      ";
  }
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "ActionPopoverItem",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "disabled": [Function],
                    "icon": [Function],
                    "onClick": [Function],
                    "submenu": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": null,
                }
              }
              onClick={[Function]}
              theme="[ theme object ]"
            >
              <ForwardRef
                className="c1"
                disabled={false}
                onClick={[Function]}
                theme="[ theme object ]"
              >
                <div
                  className="c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="menuitem"
                  tabIndex="0"
                  type="button"
                >
                  Sub Menu 2
                </div>
              </ForwardRef>
            </StyledComponent>
          </ActionPopoverItem>
        </WithTheme(ActionPopoverItem)>
      </div>
    </StyledComponent>
  </styled.div>
</ActionPopoverMenu>
`;

exports[`ActionPopover submenu right aligned closes the submenu when left key is pressed 1`] = `
.c0 {
  visibility: hidden;
  margin: 0;
  padding: 8px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
}

.c1 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 24px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
}

.c1:focus,
.c1:hover {
  background-color: #F2F4F5;
}

.c1:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c1.c1 .c2 {
  cursor: pointer;
}

<ActionPopoverMenu
  focusIndex={0}
  isOpen={false}
  items={
    Array [
      <ForwardRef
        disabled={false}
        onClick={[Function]}
      >
        Sub Menu 1
      </ForwardRef>,
      <ForwardRef
        disabled={false}
        onClick={[Function]}
      >
        Sub Menu 2
      </ForwardRef>,
    ]
  }
  menuID="ActionPopoverMenu_guid-12345"
  onClick={[Function]}
  parentID="ActionPopoverItem_guid-12345"
  setFocusIndex={[Function]}
  setItems={[Function]}
  setOpen={[Function]}
  style={
    Object {
      "left": 200,
      "position": "relative",
      "top": 92,
    }
  }
>
  <styled.div
    aria-labelledby="ActionPopoverItem_guid-12345"
    data-component="action-popover"
    id="ActionPopoverMenu_guid-12345"
    isOpen={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    role="menu"
    style={
      Object {
        "left": 200,
        "position": "relative",
        "top": 92,
      }
    }
  >
    <StyledComponent
      aria-labelledby="ActionPopoverItem_guid-12345"
      data-component="action-popover"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ifAKCX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              [Function],
              ";
  margin: 0;
  padding: ",
              [Function],
              ";
  box-shadow: ",
              [Function],
              ";
  position: absolute;
  right: 0;
  background-color: ",
              [Function],
              ";
  z-index: 1;

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ifAKCX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={
        Object {
          "current": .c0 {
  visibility: hidden;
  margin: 0;
  padding: 8px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
}

.c1 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 24px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
}

.c1:focus,
.c1:hover {
  background-color: #F2F4F5;
}

.c1:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c1.c1 .c2 {
  cursor: pointer;
}

<div
            aria-labelledby="ActionPopoverItem_guid-12345"
            class="c0"
            data-component="action-popover"
            id="ActionPopoverMenu_guid-12345"
            role="menu"
            style="position: relative; left: 200px; top: 92px;"
          >
            <div
              class="c1"
              role="menuitem"
              tabindex="0"
              type="button"
            >
              Sub Menu 1
            </div>
            <div
              class="c1"
              role="menuitem"
              tabindex="0"
              type="button"
            >
              Sub Menu 2
            </div>
          </div>,
        }
      }
      id="ActionPopoverMenu_guid-12345"
      isOpen={false}
      onClick={[Function]}
      onKeyDown={[Function]}
      role="menu"
      style={
        Object {
          "left": 200,
          "position": "relative",
          "top": 92,
        }
      }
    >
      <div
        aria-labelledby="ActionPopoverItem_guid-12345"
        className="c0"
        data-component="action-popover"
        id="ActionPopoverMenu_guid-12345"
        onClick={[Function]}
        onKeyDown={[Function]}
        role="menu"
        style={
          Object {
            "left": 200,
            "position": "relative",
            "top": 92,
          }
        }
      >
        <WithTheme(ActionPopoverItem)
          disabled={false}
          key=".$0"
          onClick={[Function]}
        >
          <ActionPopoverItem
            disabled={false}
            onClick={[Function]}
            theme="[ theme object ]"
          >
            <StyledComponent
              disabled={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "disabled": false,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  cursor: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      [Function],
                      "
  line-height: 40px;
  white-space: nowrap;
  user-select: none;
  display: flex;
  align-items: center;
  border: none;
  width: 100%;
  color: ",
                      [Function],
                      ";
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  &:focus, &:hover {
    ",
                      [Function],
                      "
  }
  &:focus {
    outline: none;
    box-shadow: inset 0px 0px 0px 2px ",
                      [Function],
                      ";
  }
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "ActionPopoverItem",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "disabled": [Function],
                    "icon": [Function],
                    "onClick": [Function],
                    "submenu": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": <div
                    class="c1"
                    role="menuitem"
                    tabindex="0"
                    type="button"
                  >
                    Sub Menu 1
                  </div>,
                }
              }
              onClick={[Function]}
              theme="[ theme object ]"
            >
              <ForwardRef
                className="c1"
                disabled={false}
                onClick={[Function]}
                theme="[ theme object ]"
              >
                <div
                  className="c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="menuitem"
                  tabIndex="0"
                  type="button"
                >
                  Sub Menu 1
                </div>
              </ForwardRef>
            </StyledComponent>
          </ActionPopoverItem>
        </WithTheme(ActionPopoverItem)>
        <WithTheme(ActionPopoverItem)
          disabled={false}
          key=".$1"
          onClick={[Function]}
        >
          <ActionPopoverItem
            disabled={false}
            onClick={[Function]}
            theme="[ theme object ]"
          >
            <StyledComponent
              disabled={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "disabled": false,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  cursor: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      [Function],
                      "
  line-height: 40px;
  white-space: nowrap;
  user-select: none;
  display: flex;
  align-items: center;
  border: none;
  width: 100%;
  color: ",
                      [Function],
                      ";
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  &:focus, &:hover {
    ",
                      [Function],
                      "
  }
  &:focus {
    outline: none;
    box-shadow: inset 0px 0px 0px 2px ",
                      [Function],
                      ";
  }
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "ActionPopoverItem",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "disabled": [Function],
                    "icon": [Function],
                    "onClick": [Function],
                    "submenu": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": <div
                    class="c1"
                    role="menuitem"
                    tabindex="0"
                    type="button"
                  >
                    Sub Menu 2
                  </div>,
                }
              }
              onClick={[Function]}
              theme="[ theme object ]"
            >
              <ForwardRef
                className="c1"
                disabled={false}
                onClick={[Function]}
                theme="[ theme object ]"
              >
                <div
                  className="c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="menuitem"
                  tabIndex="0"
                  type="button"
                >
                  Sub Menu 2
                </div>
              </ForwardRef>
            </StyledComponent>
          </ActionPopoverItem>
        </WithTheme(ActionPopoverItem)>
      </div>
    </StyledComponent>
  </styled.div>
</ActionPopoverMenu>
`;

exports[`ActionPopover submenu right aligned opens the submenu when right key is pressed 1`] = `
.c0 {
  visibility: hidden;
  margin: 0;
  padding: 8px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
}

.c1 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 24px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
}

.c1:focus,
.c1:hover {
  background-color: #F2F4F5;
}

.c1:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c1.c1 .c2 {
  cursor: pointer;
}

<ActionPopoverMenu
  focusIndex={0}
  isOpen={false}
  items={
    Array [
      <ForwardRef
        disabled={false}
        onClick={[Function]}
      >
        Sub Menu 1
      </ForwardRef>,
      <ForwardRef
        disabled={false}
        onClick={[Function]}
      >
        Sub Menu 2
      </ForwardRef>,
    ]
  }
  menuID="ActionPopoverMenu_guid-12345"
  onClick={[Function]}
  parentID="ActionPopoverItem_guid-12345"
  setFocusIndex={[Function]}
  setItems={[Function]}
  setOpen={[Function]}
  style={
    Object {
      "left": 200,
      "position": "relative",
      "top": 92,
    }
  }
>
  <styled.div
    aria-labelledby="ActionPopoverItem_guid-12345"
    data-component="action-popover"
    id="ActionPopoverMenu_guid-12345"
    isOpen={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    role="menu"
    style={
      Object {
        "left": 200,
        "position": "relative",
        "top": 92,
      }
    }
  >
    <StyledComponent
      aria-labelledby="ActionPopoverItem_guid-12345"
      data-component="action-popover"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ifAKCX",
            "isStatic": false,
            "lastClassName": "dnTSjX",
            "rules": Array [
              "
  ",
              [Function],
              ";
  margin: 0;
  padding: ",
              [Function],
              ";
  box-shadow: ",
              [Function],
              ";
  position: absolute;
  right: 0;
  background-color: ",
              [Function],
              ";
  z-index: 1;

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ifAKCX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={
        Object {
          "current": .c0 {
  display: block;
  margin: 0;
  padding: 8px 0;
  box-shadow: 0 5px 5px 0 rgba(0,20,29,0.2),0 10px 10px 0 rgba(0,20,29,0.1);
  position: absolute;
  right: 0;
  background-color: #FFFFFF;
  z-index: 1;
}

.c1 {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0 24px;
  line-height: 40px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  width: 100%;
  color: rgba(0,0,0,0.9);
  font-size: 14px;
  font-weight: 700;
  text-align: left;
}

.c1:focus,
.c1:hover {
  background-color: #F2F4F5;
}

.c1:focus {
  outline: none;
  box-shadow: inset 0px 0px 0px 2px #FFB500;
}

.c1.c1 .c2 {
  cursor: pointer;
}

<div
            aria-labelledby="ActionPopoverItem_guid-12345"
            class="c0"
            data-component="action-popover"
            id="ActionPopoverMenu_guid-12345"
            role="menu"
            style="position: relative; left: 200px; top: 92px;"
          >
            <div
              class="c1"
              role="menuitem"
              tabindex="0"
              type="button"
            >
              Sub Menu 1
            </div>
            <div
              class="c1"
              role="menuitem"
              tabindex="0"
              type="button"
            >
              Sub Menu 2
            </div>
          </div>,
        }
      }
      id="ActionPopoverMenu_guid-12345"
      isOpen={false}
      onClick={[Function]}
      onKeyDown={[Function]}
      role="menu"
      style={
        Object {
          "left": 200,
          "position": "relative",
          "top": 92,
        }
      }
    >
      <div
        aria-labelledby="ActionPopoverItem_guid-12345"
        className="c0"
        data-component="action-popover"
        id="ActionPopoverMenu_guid-12345"
        onClick={[Function]}
        onKeyDown={[Function]}
        role="menu"
        style={
          Object {
            "left": 200,
            "position": "relative",
            "top": 92,
          }
        }
      >
        <WithTheme(ActionPopoverItem)
          disabled={false}
          key=".$0"
          onClick={[Function]}
        >
          <ActionPopoverItem
            disabled={false}
            onClick={[Function]}
            theme="[ theme object ]"
          >
            <StyledComponent
              disabled={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "disabled": false,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  cursor: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      [Function],
                      "
  line-height: 40px;
  white-space: nowrap;
  user-select: none;
  display: flex;
  align-items: center;
  border: none;
  width: 100%;
  color: ",
                      [Function],
                      ";
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  &:focus, &:hover {
    ",
                      [Function],
                      "
  }
  &:focus {
    outline: none;
    box-shadow: inset 0px 0px 0px 2px ",
                      [Function],
                      ";
  }
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "ActionPopoverItem",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "disabled": [Function],
                    "icon": [Function],
                    "onClick": [Function],
                    "submenu": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": null,
                }
              }
              onClick={[Function]}
              theme="[ theme object ]"
            >
              <ForwardRef
                className="c1"
                disabled={false}
                onClick={[Function]}
                theme="[ theme object ]"
              >
                <div
                  className="c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="menuitem"
                  tabIndex="0"
                  type="button"
                >
                  Sub Menu 1
                </div>
              </ForwardRef>
            </StyledComponent>
          </ActionPopoverItem>
        </WithTheme(ActionPopoverItem)>
        <WithTheme(ActionPopoverItem)
          disabled={false}
          key=".$1"
          onClick={[Function]}
        >
          <ActionPopoverItem
            disabled={false}
            onClick={[Function]}
            theme="[ theme object ]"
          >
            <StyledComponent
              disabled={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "disabled": false,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  cursor: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      [Function],
                      "
  line-height: 40px;
  white-space: nowrap;
  user-select: none;
  display: flex;
  align-items: center;
  border: none;
  width: 100%;
  color: ",
                      [Function],
                      ";
  font-size: 14px;
  font-weight: 700;
  text-align: left;
  &:focus, &:hover {
    ",
                      [Function],
                      "
  }
  &:focus {
    outline: none;
    box-shadow: inset 0px 0px 0px 2px ",
                      [Function],
                      ";
  }
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "ActionPopoverItem",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "disabled": [Function],
                    "icon": [Function],
                    "onClick": [Function],
                    "submenu": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": null,
                }
              }
              onClick={[Function]}
              theme="[ theme object ]"
            >
              <ForwardRef
                className="c1"
                disabled={false}
                onClick={[Function]}
                theme="[ theme object ]"
              >
                <div
                  className="c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="menuitem"
                  tabIndex="0"
                  type="button"
                >
                  Sub Menu 2
                </div>
              </ForwardRef>
            </StyledComponent>
          </ActionPopoverItem>
        </WithTheme(ActionPopoverItem)>
      </div>
    </StyledComponent>
  </styled.div>
</ActionPopoverMenu>
`;
