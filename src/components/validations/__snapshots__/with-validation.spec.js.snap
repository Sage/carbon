// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`when the withValidations HOC wraps a component matches the snapshot when the HOC is passed an anonymous component with no name or display name 1`] = `
<Component
  hasError={false}
  hasInfo={false}
  hasWarning={false}
  info={Array []}
  name="foo"
  onBlur={[Function]}
  onChange={[Function]}
  validations={Array []}
  warnings={Array []}
/>
`;

exports[`when the withValidations HOC wraps a component matches the snapshot with the input component wrapped in the HOC with default props 1`] = `
<MockComponent
  hasError={false}
  hasInfo={false}
  hasWarning={false}
  info={Array []}
  name="foo "
  onBlur={[Function]}
  onChange={[Function]}
  validations={Array []}
  warnings={Array []}
/>
`;

exports[`when the withValidations HOC wraps a component when the component renders the validation icon returns an Icon with error type when the state has failed validations 1`] = `
<MockComponent
  hasError={true}
  hasInfo={true}
  hasWarning={true}
  info={Array []}
  name="foo"
  onBlur={[Function]}
  onChange={[Function]}
  validations={Array []}
  warnings={Array []}
>
  <ValidationIcon
    message="mock message"
    type="error"
  />
</MockComponent>
`;

exports[`when the withValidations HOC wraps a component when the component renders the validation icon returns an Icon with info type when the state has info and no warning or validations 1`] = `
<MockComponent
  hasError={false}
  hasInfo={true}
  hasWarning={false}
  info={Array []}
  name="foo"
  onBlur={[Function]}
  onChange={[Function]}
  validations={Array []}
  warnings={Array []}
>
  <ValidationIcon
    message="mock message"
    type="info"
  />
</MockComponent>
`;

exports[`when the withValidations HOC wraps a component when the component renders the validation icon returns an Icon with warning type when the state has warning and no validations 1`] = `
<MockComponent
  hasError={false}
  hasInfo={true}
  hasWarning={true}
  info={Array []}
  name="foo"
  onBlur={[Function]}
  onChange={[Function]}
  validations={Array []}
  warnings={Array []}
>
  <ValidationIcon
    message="mock message"
    type="warning"
  />
</MockComponent>
`;

exports[`when the withValidations HOC wraps a component when the component renders the validation icon returns the Icon when the component has an array of children 1`] = `
<MockComponent
  hasError={true}
  hasInfo={true}
  hasWarning={true}
  info={Array []}
  name="foo"
  onBlur={[Function]}
  onChange={[Function]}
  validations={Array []}
  warnings={Array []}
>
  <div
    key="div1"
  />
  foo
  <div
    key="div2"
  />
  <ValidationIcon
    message="mock message"
    type="error"
  />
</MockComponent>
`;

exports[`when the withValidations HOC wraps a component when the component renders the validation icon returns the children if no type has been set 1`] = `
<MockComponent
  hasError={false}
  hasInfo={false}
  hasWarning={false}
  info={Array []}
  name="foo"
  onBlur={[Function]}
  onChange={[Function]}
  validations={Array []}
  warnings={Array []}
>
  <div />
</MockComponent>
`;
