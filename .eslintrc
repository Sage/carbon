{
  "root": true,
  "parser": "@babel/eslint-parser",
  "rules": {
    "strict": 0,
    "class-methods-use-this": "off",
    "func-names": "off",
    "guard-for-in": "off",
    "import/extensions": ["off", "never"],
    "import/no-extraneous-dependencies": "off",
    "import/no-unresolved": "off",
    "jsx-a11y/anchor-is-valid": "warn",
    "jsx-a11y/click-events-have-key-events": "warn",
    "jsx-a11y/label-has-associated-control": "warn",
    "jsx-a11y/mouse-events-have-key-events": "warn",
    "jsx-a11y/no-noninteractive-element-interactions": "warn",
    "jsx-a11y/no-static-element-interactions": "warn",
    "max-params": ["error", 5],
    "no-eval": "error",
    "no-implied-eval": "error",
    "no-new-func": "error",
    "no-param-reassign": ["error", { "props": false }],
    "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }],
    "no-restricted-syntax": "off",
    "no-underscore-dangle": "off",
    "no-use-before-define": ["error", { "functions": false, "classes": false }],
    "one-var": "off",
    "prefer-const": ["error", { "destructuring": "any" }],
    "prefer-destructuring": [
      "error",
      {
        "VariableDeclarator": {
          "array": false,
          "object": true
        },
        "AssignmentExpression": {
          "array": false,
          "object": false
        }
      }
    ],
    "radix": "off",
    "react/destructuring-assignment": 0,
    "react/no-this-in-sfc": 0,
    "react/no-unescaped-entities": "off",
    "react/jsx-filename-extension": "off",
    "react/jsx-no-bind": [
      "error",
      { "allowArrowFunctions": true, "allowFunctions": true }
    ],
    "react/jsx-props-no-spreading": "off",
    "react/jsx-uses-react": "warn",
    "react/jsx-uses-vars": "warn",
    "react/forbid-prop-types": "off",
    "react/no-array-index-key": "warn",
    "react/no-unused-prop-types": "warn",
    "react/prop-types": "off",
    "react/require-default-props": "off",
    "react/sort-comp": [
      "error",
      {
        "order": [
          "static-methods",
          "lifecycle",
          "/^on.+$/",
          "/^(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
          "everything-else",
          "/^render.+$/",
          "render"
        ]
      }
    ],
    "react/state-in-constructor": "off",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    // Copy from airbnb with UNSAFE_ ignore added
    "camelcase": [
      "error",
      {
        "allow": ["^UNSAFE_"],
        "properties": "never",
        "ignoreDestructuring": false
      }
    ],
    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": "styled-system",
            "importNames": ["color"],
            "message": "Please use the default export from 'src/style/utils/color' instead."
          }
        ]
      }
    ],
    /* TODO: (FE-6306) - These rules have been added to allow us to
     * upgrade Storybook, but all rules will need to be looked at */
    "no-restricted-exports": "off",
    "default-param-last": "off",
    "react/no-unstable-nested-components": "off",
    "react/jsx-no-constructed-context-values": "off",
    "react/jsx-no-useless-fragment": "off",
    "no-unsafe-optional-chaining": "off",
    "prefer-regex-literals": "off",
    "arrow-body-style": "off"
  },
  "env": {
    "es6": true,
    "browser": true
  },
  "plugins": ["react", "react-hooks", "ssr-friendly"],
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:no-unsanitized/recommended-legacy",
    "plugin:ssr-friendly/recommended",
    "airbnb",
    "prettier"
  ],
  "globals": {
    "global": false,
    "process": false
  },
  "overrides": [
    {
      "files": ["*.mdx"],
      "extends": "plugin:mdx/recommended",
      "rules": {
        "jsx-a11y/anchor-has-content": "off",
        "jsx-a11y/control-has-associated-label": "off",
        "react/self-closing-comp": "off"
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "ecmaFeatures": {
          "jsx": true
        },
        "project": ["./tsconfig.json", "./tsconfig-playwright.json"]
      },
      "plugins": ["@typescript-eslint"],
      "extends": ["plugin:@typescript-eslint/recommended", "prettier"],
      "settings": {
        "mdx/code-blocks": true,
        "react": {
          "version": "detect"
        }
      },
      "rules": {
        "import/named": "off",
        "react/prefer-stateless-function": "off",
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": "error",
        "@typescript-eslint/no-empty-function": [
          "error",
          { "allow": ["arrowFunctions"] }
        ],
        "@typescript-eslint/no-unused-vars": [
          "error", { "ignoreRestSiblings": true }
        ],
        "react/function-component-definition": [
          "error",
          {
            "namedComponents": "arrow-function",
            "unnamedComponents": "arrow-function"
          }
        ],
        "no-restricted-imports": [
          "error",
          {
            "name": "prop-types",
            "message": "Please do not import `prop-types` in TypeScript files."
          },
          {
            "name": "react",
            "importNames": ["useId", "startTransition", "useTransition", "useDeferredValue", "useSyncExternalStore", "useInsertionEffect"],
            "message": "Carbon must support projects on React v17. Please do not use React v18 features."
          }
        ],
        "react/prop-types": "off"
      }
    },
    {
      "files": ["*.stories.tsx"],
      "rules": {
        "react/function-component-definition": [
          "error",
          {
            "namedComponents": "arrow-function",
            "unnamedComponents": "arrow-function"
          }
        ]
      }
    },
    {
      "files": ["*.spec.*"],
      "globals": {
        "jest": false,
        "test": false
      },
      "plugins": ["jest"],
      "extends": ["plugin:jest/recommended"],
      "rules": {
        "jest/expect-expect": "off",
        "jest-dom/prefer-to-have-attribute": "off",
        "jest/no-alias-methods": "off"
      }
    },
    {
      "files": ["*.test.*"],
      "plugins": ["jest", "testing-library", "jest-dom"],
      "extends": [
        "plugin:jest/recommended",
        "plugin:testing-library/react",
        "plugin:jest-dom/recommended"
      ]
    },
    {
      "files": ["*.pw.ts*", "*.test-pw.ts*", "playwright/**/*.ts*"],
      "plugins": ["playwright"],
      "rules": {
        "playwright/no-commented-out-tests": "error",
        "playwright/no-focused-test": "error",
        "playwright/no-skipped-test": "warn",
        "playwright/no-wait-for-timeout": "error",
        "no-return-await": "warn",
        "no-return-assign": "warn",
        "no-await-in-loop": "off",
        "@typescript-eslint/no-floating-promises": "error"
      },
      "settings": {
        "playwright": {
          "messages": {
            "noSkippedTest": "Test skipped. If unresolved, raise a JIRA ticket or GitHub issue, then reference it in a code comment above.",
            "noWaitForTimeout": "Hardcoded timeouts make tests fragile and inefficient. Use Playwrightâ€™s built-in waits (e.g. `locator.waitFor()`) or auto-retrying assertions (e.g. `await expect(locator).toBeVisible()`) to wait for conditions like element visibility or text presence."
          }
        }
      }
    }
  ]
}
